[{"C:\\Users\\chipc\\Desktop\\Dev\\my-react-app\\src\\index.js":"1"},{"size":12313,"mtime":1611252437443,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1ctuduy","C:\\Users\\chipc\\Desktop\\Dev\\my-react-app\\src\\index.js",["7","8","9","10","11"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// get our fontawesome imports\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { faStop } from \"@fortawesome/free-solid-svg-icons\";\nimport { faMoon } from \"@fortawesome/free-solid-svg-icons\";\n\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n//import Metronome from './App';\n\n\n\n\n\n/***\n * \n * INPUTS\n * \n */\n\n\nfunction Button(props) {\n  const playElement = <FontAwesomeIcon icon={faPlay} />;\n  const stopElement = <FontAwesomeIcon icon={faStop} />;\n  return (\n    <button \n      className=\"button-play\" \n      onClick={props.onClick}\n      name=\"play-button\"\n    >\n      {props.value === \"Start\" ? playElement : stopElement}\n    </button>\n  );\n}\n\nfunction Slider(props) {\n  return (\n    <input \n      type=\"range\" \n      id=\"tempo\" \n      min=\"30\" \n      max=\"300\" \n      step=\"1\"\n      value={props.tempo}\n      onChange={props.onChange}/>\n  )\n}\n\n\n\n\n\n\n\n/***\n * \n * CANVAS\n * \n */\n\nclass Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {};\n    this.canvasRef = React.createRef();\n\n    this.resetCanvas = this.resetCanvas.bind(this);\n\n    window.onorientationchange = this.resetCanvas;\n    window.onresize = this.resetCanvas;\n  }\n  \n  componentDidMount() {\n    this.drawCanvas();\n    this.resetCanvas();\n  }\n  \n  componentDidUpdate() {\n    this.drawCanvas();\n  }\n\n  resetCanvas() {\n    this.canvasRef.current.width = window.innerWidth;\n    this.canvasRef.current.height = window.innerHeight;\n    window.scrollTo(0,0); \n  }\n  \n  drawCanvas() {\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    let color = \"#333\";\n    ctx.fillStyle = color;\n    ctx.globalAlpha = 1;\n\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    if (!this.props.isplaying) return;\n\n    let percentage = ((60/this.props.tempo) - (this.props.nextnotetime - this.props.currenttime)) / (60/this.props.tempo);\n    if (percentage < 0) percentage = 0;\n\n    color = \"#dd77dd\";\n    if (this.props.tick === true) {\n      color = \"#eee\";\n    }\n    ctx.strokeStyle = color;\n    ctx.globalAlpha = 1-percentage; //this.props.alpha;\n    ctx.beginPath();\n    ctx.lineWidth = 100-percentage*100;\n    ctx.arc(canvas.width/2, canvas.height/3, percentage * 200, 0, 2 * Math.PI);\n    \n    ctx.stroke(); \n    ctx.fillStyle = \"#ffaaff\";\n    ctx.fill();    \n  }\n  \n  render() {\n    return (\n      <canvas ref={this.canvasRef} id=\"canvas\" height=\"100\" width=\"100\"/>  \n    );\n  }\n}\n\nclass Animation extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      tick: false,\n      lastNoteDrawn: null,\n      alpha: 0,\n      percentToNextNote: 0,\n      nextNoteTime: 0\n    }\n    \n    this.updateAnimation = this.updateAnimation.bind(this);\n  }\n  \n  componentDidMount() {\n    this.rAF = requestAnimationFrame(this.updateAnimation);\n  }\n  \n  updateAnimation() {\n    if (this.props.isplaying) {\n\n      let currentTime = this.props.audiocontext.currentTime;\n      let notesInQueue = this.props.queue;\n      let currentNote = this.state.lastNoteDrawn;\n\n  \n      while (notesInQueue.length && notesInQueue[0].time < currentTime) {\n          currentNote = notesInQueue[0];\n          notesInQueue.splice(0,1);\n      }\n\n      if (currentNote !== this.state.lastNoteDrawn) {\n        this.setState((state, props) => ({\n          tick: true,\n          alpha: 1,\n          percentToNextNote: 0,\n          nextNoteTime: currentNote.time + (60 / props.tempo)\n\n        }));\n      } else {\n\n        \n\n        this.setState((state, props) => ({\n          tick: false,\n          alpha: state.alpha - .1 < 0 ? 0 : state.alpha-.1,\n        }));\n      }\n    } else {\n        this.setState(state => ({\n          tick: false,\n          alpha: state.alpha - .1 < 0 ? 0 : state.alpha-.1\n        }));\n    }\n    \n    this.rAF = requestAnimationFrame(this.updateAnimation);\n  }\n  \n  componentWillUnmount() {\n    cancelAnimationFrame(this.rAF);\n  }\n  \n  render () {\n    return (\n      <Canvas tick={this.state.tick} tempo={this.props.tempo} nextnotetime={this.state.nextNoteTime} alpha={this.state.alpha} currenttime={this.props.audiocontext.currentTime} isplaying={this.props.isplaying}/>\n    )\n  }\n}\n\n\n\n\n\n\n\nclass TempoInputs extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"tempo-inputs\">\n        <div className=\"tempo-input-row\">\n          <button className=\"button-tempo large\" name=\"decrement-tempo\" onClick={this.props.onClick}>-</button>\n          <div className=\"tempo-label\">\n            <span className=\"large\">{this.props.tempo}</span> BPM\n          </div>\n          <button className=\"button-tempo large\" name=\"increment-tempo\" onClick={this.props.onClick}>+</button>\n        </div>\n        <Slider onChange={this.props.onChange} tempo={this.props.tempo}/>\n      </div>\n    )\n  }\n}\n\nfunction RadioButton(props) {\n  var radioElement = <input \n                        className=\"checkbox\"\n                        type=\"radio\" \n                        id={props.id + \"-\" + props.value}\n                        name={props.id}\n                        value={props.value}\n                      />\n  if (props.default===props.id) {\n    radioElement = <input \n                      className=\"checkbox\"\n                      type=\"radio\" \n                      id={props.id + \"-\" + props.value}\n                      name={props.id}\n                      value={props.value}\n                      defaultChecked\n                    />\n  }\n  return (\n    <span>\n      {radioElement}\n      <label htmlFor={props.id + \"-\" + props.value}>{props.value}</label>\n    </span>\n  )\n}\n\nclass RadioInputs extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    let label = this.props.label;\n    if (this.props.value > 1) {\n      if (this.props.id === \"beats\") {\n        label = \" beats per bar\";\n      } else {\n        label = \" clicks per beat\";\n      }\n    }\n\n    return (\n      <div className=\"radio-input-section\">\n        <div className=\"label\"><b>{this.props.value}</b>{label}</div>\n        <div className=\"radio-scrollable\"  onChange={this.props.onChange}>\n          <RadioButton value=\"1\" id={this.props.id} default=\"clicks\" />\n          <RadioButton value=\"2\" id={this.props.id}/>\n          <RadioButton value=\"3\" id={this.props.id}/>\n          <RadioButton value=\"4\" id={this.props.id} default=\"beats\" />\n          <RadioButton value=\"5\" id={this.props.id}/>\n          <RadioButton value=\"6\" id={this.props.id}/>\n          <RadioButton value=\"7\" id={this.props.id}/>\n          <RadioButton value=\"8\" id={this.props.id}/>\n          <RadioButton value=\"9\" id={this.props.id}/>\n          <RadioButton value=\"10\" id={this.props.id}/>\n          <RadioButton value=\"11\" id={this.props.id}/>\n          <RadioButton value=\"12\" id={this.props.id}/>\n        </div>\n      </div>\n    )\n  }\n\n}\n\n\n\n\n/***\n * \n * MAIN METRONOME COMPONENT\n * \n */\n\nclass Metronome extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      tempo: 120,\n      maxTempo: 300,\n      minTempo: 30,\n      beatsPerBar: 4,\n      clicksPerBeat: 1,\n      nextBeat: 0,\n      nextClick: 0,\n      isPlaying: false,\n      lookahead: 25,\n      scheduleAheadTime: .1,\n      nextNoteTime: 0,\n      noteLength: .1,\n      audioUnlocked: false,\n      noteQueue: [],      \n    };\n    \n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTick = this.handleTick.bind(this);\n\n    this.audioContext = new AudioContext();\n\n    this.timerWorker = new Worker(\"/worker.js\");\n\n    this.timerWorker.onmessage = (e) => {\n        if (e.data === \"tick\") {\n            this.handleTick();\n        }\n        else\n            console.log(\"message: \" + e.data);\n    };\n\n\n    this.timerWorker.postMessage({\"interval\":this.state.lookahead});\n    \n  }\n\n  scheduleNote(note) {\n    console.log(\"Scheduling note to be played at: \" + this.state.nextNoteTime);\n    var osc = this.audioContext.createOscillator();\n    var gainNode = this.audioContext.createGain();\n    osc.connect(gainNode);\n    //osc.connect( this.audioContext.destination );\n    gainNode.connect(this.audioContext.destination);\n    if (note.beat != 0) {\n      osc.frequency.value = 440.0;\n    } else {\n      osc.frequency.value = 880.0;\n    }\n    if (note.click != 0) {\n      osc.frequency.value = 330.0;\n    }\n\n    osc.start( this.state.nextNoteTime);\n    gainNode.gain.setTargetAtTime(0, this.state.nextNoteTime + this.state.noteLength, 0.015);\n    osc.stop( this.state.nextNoteTime + this.state.noteLength*2);\n\n  }\n\n  handleTick() {\n    while (this.state.nextNoteTime < this.audioContext.currentTime + this.state.scheduleAheadTime) {\n\n      let nextBeat = this.state.nextBeat;\n      let nextClick = this.state.nextClick;\n    \n      let nextNote = new Note(this.state.nextNoteTime, nextBeat, nextClick);\n      this.scheduleNote(nextNote);\n\n      if (this.state.clicksPerBeat > 1) {\n        nextClick++;\n        if (nextClick >= this.state.clicksPerBeat) {\n          nextClick = 0;\n          nextBeat++;\n          if (nextBeat >= this.state.beatsPerBar) nextBeat = 0;\n        }\n      } else {\n        nextBeat++;\n        if (nextBeat >= this.state.beatsPerBar) nextBeat = 0;\n      }\n\n      \n\n      this.setState(state => {\n        const queue = state.noteQueue.concat(nextNote);\n        let secondsPerBeat = 60.0 / state.tempo;\n        return {\n          noteQueue: queue,\n          nextNoteTime: state.nextNoteTime + 1/state.clicksPerBeat * secondsPerBeat,\n          nextBeat: nextBeat,\n          nextClick: nextClick\n        };\n      });\n    }\n  }\n  \n  handleClick(e) {\n\n    if (e.target.name === \"increment-tempo\") {\n      this.setState(state => ({tempo: state.tempo+1 > state.maxTempo ? state.tempo : state.tempo+1}));\n      return;\n    } else if (e.target.name === \"decrement-tempo\") {\n      this.setState(state => ({tempo: state.tempo-1 < state.minTempo ? state.tempo : state.tempo-1}));\n      return;\n    }\n\n    this.audioContext = new AudioContext();\n\n\n    this.timerWorker.postMessage(this.state.isPlaying ? \"stop\" : \"start\");\n\n    if (!this.state.audioUnlocked) {\n      var buffer = this.audioContext.createBuffer(1, 1, 22050);\n      var node = this.audioContext.createBufferSource();\n      node.buffer = buffer;\n      node.start(this.audioContext.currentTime);\n    }\n\n    this.setState(state => ({\n      isPlaying: !state.isPlaying,\n      audioUnlocked: true,\n      noteQueue: [],\n      nextNoteTime: 0,\n      nextBeat: 0,\n      nextClick: 0\n    }));\n  }\n  \n  handleChange(e) {\n    if (e.target.name === \"beats\") {\n      this.setState({beatsPerBar: e.target.value});\n    } else if (e.target.name===\"clicks\") {\n      this.setState({clicksPerBeat: e.target.value});\n    } else {\n      this.setState({tempo: e.target.value});\n    }\n\n  }\n  \n  render() {\n    return (\n      <div className=\"metronome\">\n        <Animation tempo={this.state.tempo} isplaying={this.state.isPlaying} queue={this.state.noteQueue} audiocontext={this.audioContext} />\n        <div className=\"inputs\">\n          <Button \n            value={this.state.isPlaying ? \"Stop\" : \"Start\"}\n            onClick={this.handleClick} />\n          <TempoInputs onChange={this.handleChange} tempo={this.state.tempo} onClick={this.handleClick}/>\n          <RadioInputs label=\" beat per bar\" id=\"beats\" onChange={this.handleChange} value={this.state.beatsPerBar} />\n          <RadioInputs label=\" click per beat\" id=\"clicks\" onChange={this.handleChange} value={this.state.clicksPerBeat} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n\nclass Navbar extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n\n      <div className=\"navbar\">\n        <div className=\"logo\">\n          Zen Metronome\n        </div>\n        <button className=\"button-theme-toggle\">\n          <FontAwesomeIcon icon={faMoon} />\n        </button>\n      </div>\n\n    ) \n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nclass Note {\n  constructor(time = 0, beat = 0, click = 0) {\n    this.time = time;\n    this.beat = beat;\n    this.click = click;\n  }\n}\n\n\n// ========================================\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navbar />\n    <Metronome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);",{"ruleId":"12","severity":1,"message":"13","line":204,"column":3,"nodeType":"14","messageId":"15","endLine":206,"endColumn":4},{"ruleId":"12","severity":1,"message":"13","line":251,"column":3,"nodeType":"14","messageId":"15","endLine":253,"endColumn":4},{"ruleId":"16","severity":1,"message":"17","line":346,"column":19,"nodeType":"18","messageId":"19","endLine":346,"endColumn":21},{"ruleId":"16","severity":1,"message":"17","line":351,"column":20,"nodeType":"18","messageId":"19","endLine":351,"endColumn":22},{"ruleId":"12","severity":1,"message":"13","line":462,"column":3,"nodeType":"14","messageId":"15","endLine":464,"endColumn":4},"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]